name: Deploy to Amazon ECS

on:
  push:
    branches: [ "dev" ]
    paths:
      - "server/**"
      - "!client/**"
 
env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ecs-webapi
  ECS_SERVICE: cactus-webapi-deploy                 
  ECS_CLUSTER: cactusCluster
  ECS_TASK_DEFINITION: ./server/server/task-definition.json      
  CONTAINER_NAME: ecs-webapi
  
  APPLICATION: ${{ secrets.APPLICATION }}
  
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ECS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_ECS_SECRET_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Install JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'adopt'
        java-version: '11'
    
    - name: Application YAML Configuration
      run: mkdir -p server/server/src/main/resources && touch server/server/src/main/resources/application.yml && echo '${{ env.APPLICATION }}' > server/server/src/main/resources/application.yml
    
    - name: Application YAML Uploading
      uses: actions/upload-artifact@v2
      with:
        name: application.yml
        path: server/server/src/main/resources/application.yml
        
    - uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '7.5'
        arguments: build
        build-root-directory: server/server
        cache-disabled: true
  
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      working-directory: ./server/server
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
